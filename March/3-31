进程管理
描述 状态 线程 进程间通信 互斥/同步 死锁
一个具有一定独立功能的程序在一个数据集合上的一次动态执行过程

程序代码 处理数据 计数器的值指示下一条将运行的指令 通用的寄存器的当前值堆栈 一组系统资源     包含正在运行的一个程序的所有状态信息
程序是产生进程的基础  每次运行构成不同的进程 进程是程序功能的体现 通过多次执行一个程序可对应多个进程    通过调用关系一个进程可包括多个程序
多对多
进程是动态的 程序是静态的 程序时有序代码的几何 进程是程序的执行 进程有核心态/用户态
进程是暂时的 程序是永久的 进程是一个状态变化的过程 程序可长久保存
进程与程序的组成不同 进程的组成包括程序 数据和进程控制块（进程状态信息）

进程的特点
动态性 动态创建 结束    并发性 可以独立调度并占用处理机运行 并发并行    独立性 不同进程的工作不相互影响     制约性 因访问共享数据/资源或进程间同步而产生制约
程序=算法+数据结构    描述进程的数据结构 进程控制块  PCB 操作系统为每个进程都维护了一个PCB用来保存与该进程有关的各种状态信息

进程控制块  操作系统管理控制进程运行所用的信息集合    操作系统用PCB描述进程的基本情况及运行变化的过程 PCB是进程存在的唯一标志
PCB含有三类信息
进程标识信息 本进程标识 本进程产生者标识（父进程） 用户标识
处理机状态信息保存区 保存进程的运行现场信息  用户可见寄存器 控制状态寄存器 栈指针
进程控制信息 调度和状态信息 进程间通信信息 存储管理信息 进程所用资源 有关数据结构连接信息
PCB组织方式  链表 同一状态进程PCB成一链表     多个状态对应多个不同链表              索引表     同一状态进程归入一个index表 多个状态对应多个不同的index表

进程生命周期 状态变化 挂起
生命期 创建 运行 等待 唤醒 结束
创建  系统初始化  用户请求创建一个新进程 正在运行的进程执行了创建进程的系统调用
运行  内核选择一个就绪的进程 让它占用处理机并执行 为何/如何
等待  请求并等待系统服务 启动某种操作 需要的数据没有到达     进程只能自己阻塞自己 因为只有进程自身才能知道何时需要等某种时间发生
唤醒  被阻塞进程需要资源可被满足 被阻塞进程等待事件到达 将该进程的PCB插入到就绪队列    进程只能被别的进程或操作系统唤醒
结束  正常退出 错误推出 致命错误 被其他进程所杀

进程状态变化
运行状态  就绪状态  等待状态
创建状态 结束状态
可能的状态变化  

进程挂起
阻塞挂起状态 外存 等待某事件出现     就绪挂起状态 外存 只要进入内存即可运行
阻塞到阻塞挂起    就绪到就绪挂起    运行到就绪挂起
优先级
外存时  阻塞挂起到就绪挂起
解挂/激活把一个进程从外存转到内存 
就绪挂起到就绪    阻塞挂起到阻塞
状态队列  操作系统维护一组队列表示系统中所有进程当前状态    不同状态分别用不同队列表示     每个进程的PCB都根据它的状态加入到相应的队列中 发生变化则脱离加入另一个队里了

线程管理
更小的独立运行的基本单位
创建进程 分配资源 建立pcb  撤销进程 回收资源 撤销pcb   进程切换 保存当前进程状态信息
新的实体  实体间并发执行 实体之间共享相同的地址空间

进程用来管理资源  从运行角度看 代码在这个资源平台上的一条执行流程
线程=进程-共享资源    优点 一个进程中可以存在多个线程 各个线程可以并发执行 各线程间可以共享地址空间和文件等资源
缺点 一个线程崩溃 所有线程崩溃
比较 进程是资源分配单位 线程是CPU调度单位
进程拥有一个完整的资源平台 线程只独享必不可少的资源 如寄存器/栈
线程同样具有就绪 阻塞 执行 三种基本状态 同时具有状态之间转换关系
线程能减少并发执行时间和空间开销   线程创建时间比进程短 终止时间段 同一进程内线程切换时间比进程短 同一进程各线程间共享内存文件资源 可直接进行不通过内核的通信

线程实现 用户线程 内核线程 轻量级进程
用户线程和内核线程 多对一 一对一 多对多
TCB 用户空间实现线程机制不依赖于操作系统内核 由用户级线程库函数完成线程管理 包括创建 终止 同步 调度
缺点 阻塞性的系统调用如何实现 如果一个线程发起系统调用而阻塞 则整个进程在等待   当一个线程运行后 除非它主动交出cpu使用权否则它所在的进程中其他线程无法运行    由于时间片分配给进程故多线程执行时每个线程得到时间片少 执行较慢
内核线程 指在操作系统内核当中实现的一种线程机制 由操作系统的内核来完成线程的创建 终止 管理 
粒度更小 切换开销较大
轻量级进程  内核支持的用户线程 一个进程可有一个或多个轻量级进程 每个量级进程由一个单独的内核线程来支持

上下文切换 停止当前运行进程 并且调度其他进程
寄存器信息 另一个进程控制块保存的信息恢复到cpu   汇编语言      开销越小越好
就绪队列  等待i/o队列 僵尸队列
进程创建
fork exec  pid   parent child
fork函数实现开销 子进程分配内存 复制父进程内存和cpu寄存器到子进程里 开销昂贵    
绝大多数情况 调用fork后调用exec    frok操作中内存复制是没有作用的 子进程将可能关闭打开的文件和连接  开销因此高 
vfork创建进程时不在创建一个同样的内存映像 轻量级fork 子进程应该几乎立即调用exec 现在不再使用如果使用copy on write技术

系统调用exec()加载程序取代当前运行的进程
加载一个不同的程序在main函数开始执行   允许一个进程指定参数的数量和它字符串参数数组  

等待/终止
wait()系统调用是被父进程用来等待子进程的结束
子进程向父进程返回一个值 所以父进程必须接受这个值并处理
wait()系统调用担任这个要求  它使父进程去睡眠来等待子进程的结果 子进程调用exit()时 操作系统解锁父进程通过exit()传递得到返回值作为wait调用的一个结果 如果这里没有子进程存活则立即返回   如果由父进程僵尸等待 wait立即返回其中一个值并解除僵尸状态
进程结束执行后调用exit()
这个系统调用 将这程序的结果作为一个参数 关闭所有打开的文件连接等 释放内存 释放大部分支持进程的操作系统结构 检查是否父进程是存活着的 清理所有等待的僵尸进程
进程终止是最终的垃圾收集（资源回收）
