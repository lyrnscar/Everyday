计算机组成原理     数据结构     c和汇编语言
功能  对上对下  对应用程序 从用户角度 操作系统是一个控制软件    管理应用程序    为应用程序提供服务     杀死应用程序
         对下   资源管理     管理外设 分配资源       
进程 文件 地址空间          对应           cpu  磁盘  内存
层次结构  硬件之上 应用程序之下
系统软件  应用软件之下   为应用软件提供服务支撑
界面属于外壳shell  不是内核kernel
硬件资源  操作系统内部组件包括 cpu调度器 物理内存管理 虚拟内存管理 文件系统管理 中断处理与设备驱动
内核特征  
并发 一段时间多个程序运行  同时存在多个运行程序 需要os管理和调度       并行 一个时间点
共享 '同时'访问 互斥共享
虚拟  利用多道程序设计技术让每个用户都觉得有一个计算机专门为他服务
异步  程序执行不是一贯到底而是走走停停 推进速度不可预知     只要运行环境相同os需要保证程序运行结果相同

综合不同课程 程序设计语言 数据结构 算法 体系结构 材料 概念原理源代码 技能 设计实现
操作系统在不停发展
知道是什么 为什么 怎么做
研究基石   系统基本组成部分  硬件发展应用需求  学术工业持续推进
ACM IEEE USENIX 国内CCF
SOSP USENIX 最新现状

实际操作系统代码量巨大 不可能完全了解 理解核心内容
管理并发 挑战
管理原始硬件 时间依赖 非法行为 硬件故障
代码高效 低耗cpu 内存 磁盘
操作系统出错 机器出错 比用户应用程序具有更高的稳定性
系统安全基础

需要权衡 空间时间 性能/可预测性 公平/性能
硬件方面 良好的硬件管理 合理的资源分配
学习操作系统  动手实验  听过的会忘记 看到的能记住 亲自做过才能理解

unix操作系统  linux  windows

早期计算机使用纸带传输程序和数据 操作系统起到加载作用
cpu等硬件快速发展 计算机速度得到提升 性能未得到充分利用    成批/离线处理
内存容量越来越大 cpu执行多个程序   多道程序设计    i/o效率低于cpu 利用cpu
为了更好的利用计算机资源，更好的和用户交互 出现了分时系统    时间片0.001s    外设（时钟）
个人电脑操作系统  单用户 不关注利用率 重点是用户界面和api  很多服务和功能不存在        摩尔定律
多核   网络快速发展  分布式操作系统
松、紧耦合系统
多个系统为一个人服务  物联网 云计算

结构  简单操作系统 ms-dos   汇编语言实现  不分模块的单体内核
unix操作系统是72年再贝尔实验室 c实现 可移植
微内核 尽可能把内核功能移到存储空间  性能与灵活性难以兼得
学术界  外核 
虚拟机 vmm 管理程序   虚拟机监视器    多操作系统共享硬件资源


启动 中断 异常 系统调用

启动  cpu 总线  i/o  内存       DISK存放os  BIOS基本i/o处理系统    
Bootloader加载os    cs段寄存器 ip指令寄存器   POST加电自检 寻找显卡和执行BIOS
bootloader在硬盘第一个扇区   512字节   
bootloader将操作系统代码和数据从硬盘加载到内存中   跳转到操作系统起始地址

操作系统与设备和程序交互
外设 中断   系统应用 调用 异常
系统调用 应用程序向操作系统发出服务请求
异常  非法指令或其他坏的处理状态 如内存出错
中断  来源外设 不同硬件设备的计时器和网络的中断

计算机运行中 内核是被信任的第三方
只有内核可以执行特权指令
为了方便应用程序

源头 中断 外设    异常 应用程序意想不到的行为     系统调用 应用程序请求操作提供服务
处理时间    中断 异步       异常 同步      系统调用 异步/同步
响应  中断 持续 对用户应用程序是透明的     异常 杀死或者重新执行意想不到的应用系统指令      系统调用 等待和持续

硬件  设置中断标记 cpu初始化     将内部外部事件设置中断标记 中断事件的id
软件  保存当前处理状态  中断服务程序处理  清除中断标记  恢复之前保存的处理状态
异常 异常编号     保存现场  异常处理 杀死/重新执行    恢复现场
系统调用   程序访问主要是通过高层次的api接口而不是系统调用
win32  posix用于unix linux macosx    java用于java虚拟机jvm
通常情况下 与每个系统调用相关的序号    系统调用接口调用内核态中预期系统调用    用户不需要知道系统调用如何实现

用户态 应用程序执行时cpu处于状态 优先级较低 不能访问特定i/o
内核态 操作系统执行时cpu处于状态 任何指令 特权指令 访问i/o指令  完全控制计算机系统
system call interface
切换堆栈  执行系统调用开销较大 时间    目的是安全可靠环境中运行
跨越操作系统边界开销   执行时间上的开销超过程序系统调用     
开销：建立终端/异常/系统调用号与对应服务例程映射关系的初始化开销  
建立内核堆栈  
验证参数  
内核态映射到用户态的地址空间 更新页面映射状态   
内核态独立地址空间TLB
