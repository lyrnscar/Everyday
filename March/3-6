4.P2P   没有服务器  任意端系统间直接通信  节点阶段性接入Internet  节点可能更换ip
文件分发   
C/S架构线性增长  P2P架构平缓  
BitTorrent  tracker跟踪参与torrent节点    torrent：交换同一个文件的文件快的节点组
文件划分为256KB的chunk  节点加入torrent  下载同时节点需要向其他节点上传  节点可能加入或离开  一旦节点获得可能离开或留下
获取chunk 稀缺优先                  发送chunk tit-for-tat   向4个邻居发送chunk（最快的） 每10s重新评估top4  每30s随机选其他节点

P2P索引技术
搜索信息  信息到节点位置（ip+端口号）的映射     文件共享（电驴）   即时消息（QQ）
集中式索引 节点加入时通知中央服务器     单点失效  性能瓶颈  版权问题
洪泛式查询 完全分布式架构  每个节点对他共享的文件进行索引 只对它共享的文件进行索引     覆盖网络Graph
查询消息通过已有TCP连接发送  节点转发查询消息  如果查询命中则利用反向路径发回查询节点
层次式覆盖网络  介于集中式索引与洪泛查询    每个节点或者是超级节点或者被分配一个超级节点    超级节点负责跟踪子节点的内容
Skype采用这种技术  本质上P2P 用户/节点对之间直接通信  私有应用层协议  层次式覆盖网络  索引负责维护用户名与Ip地址映射  索引分布在超级节点上

Socket编程 API接口
端设计     直接网卡编程（硬件）   基于Packet Driver   基于NDIS网络编程针对windows   基于LibPcap、Libnet、Libnids、Libicmp编程     NetBIOS编程windows
socket 传输层    web/rpc/中间件编程（应用层）
应用编程接口API   应用层协议  应用进程       操作系统（接口）     就是应用进程的控制权和操作系统的控制权进行转换的一个系统调用接口
典型的应用编程接口：套接字 socket     winsock    TLI传输层接口

socket api 最初设计 BSD UNIX-Berkley  面向TCP/IP协议栈接口   目前 事实上的工业标准   绝大多数操作系统都支持  网络应用最典型API  通信模型 C/S     应用进程间通信的抽象机制   
与哪一个服务器的套接字对应   传输层协议    端口号    标识通信端点（对外）：IP地址+端口号          操作系统（对内）套接字描述符（小整数）
Socket抽象 类似于文件的抽象  分配一个数据结构存储套接字相关信息  返回套接字描述符
已定义地址结构  sockaddr_in    地址族AF_INET     使用TCP/IP协议簇的网络应用程序声明端点地址变量时，使用该结构

socket api函数  wsastartup-》应用程序-》wsacleanup
WSAStartup 首先调用    第一个参数知名winsock版本  第二个返回实际版本信息
WSACleanup 最后电泳 解除与Socket绑定 释放Socket占用资源
socket 创建套接字 返回套接字描述符（sd）   第一个参数（协议族）：protoofamily=PF_INET(TCP/IP) 第二个参数套接字类型  第三个参数协议号0默认
服务类型：sock_stream tcp        sock_dgram udp         sock_raw直接面向网络层（需要权限）                TCP：可靠 面向连接 字节流传输 点对点   UDP:不可靠 无连接 数据包传输
Closesocket 关闭一个描述符为sd的套接字  如果多个进程共享一个套接字，调用closesocket将引用计数减1，减到0关闭    一个进程中的多线程对一个套接字的使用无计数  返回值0成功
bind  为套接字设置地址信息        绑定套接字本地端点地址IP+端口号   参数：描述符/端点地址       客户程序一般不必调用bind     服务器端需要数值端口号
定义地址通配符INADDR_ANY 主机任意有效地址都成立（多个主机）

listen  置服务器端流套接字处于监听状态 仅服务器端调用 仅用于服务器端TCP 面向连接的流套接字   设置连接请求队列大小  返回值0成功 error失败
connet 调用使客户套接字与特定计算机的特定端口的套接字进行连接   仅用于客户端   可用于TCP也可用于UDP客户端   udp即指定服务器端点地址
accept  仅用于服务器端  仅用于TCP套接字   利用新创建套接字与客户通信     并发考虑（多进程多线程）
send  sendto   发送
recv   recvfrom   接收   TCP套接字或连接模式的客户端UDP套接字    recvfrom 用于非连接模式的UDP套接字
setsockopt getsockopt   设置套接字选项参数  获取套接字选项参数
网络字节顺序   定义了标准的用于协议头中的二进制整数表示  socket api函数的参数需要存储为网络字节顺序    htons本地->网络 ntohs反（16bit）    htonl ntohl 32bit
调用基本流程 

客户端软件设计  
解析服务器IP地址：可能使用域名或IP地址表示服务器  IP使用32为二进制IP地址  需要将域名或IP地址转换为32位IP地址  点分inet_addr()   域名gethostbyname（）
解析服务器（熟知）端口号  客户端还可能使用服务名如http表示服务器端口  需要将服务名转换为数值端口号
解析协议号  客户端可能使用协议名  需要将协议名转换为协议号  
TCP客户端软件流程 1确定服务器ip地址与端口号 2.创建套接字 3.分配本地端点地址（自动） 4.连接服务器（套接字） 5.遵循应用层协议进行通信 6.关闭/释放连接
UDP客户端软件流程  1确定服务器ip地址与端口号 2.创建套接字 3.分配  4.指定服务器端点地址，构造UDP数据报  5.遵循应用层协议进行通信 6.关闭
实现 connectsock()   设计一个connectsock过程封装底层代码
connectUDP connectTCP
DAYTIME服务 获取日期时间 双协议服务端口号13 TCP利用连接请求触发 UDP需要客户端发送一个请求

服务器软件设计
4种类型基本服务器 循环无连接 循环面向连接 并发无连接 并发面向连接
循环无连接1.创建套接字 2.绑定端点地址 3.反复接受来自客户端请求 4.遵循应用层协议构造响应报文发送给客户
数据发送 服务器端不能使用connect（）函数  无连接服务器使用sendto函数发送数据报
获取客户端点地址 调用recvfrom()函数接收数据时自动提取
循环面向连接：1.创建套接字，绑定熟知端口号 2.设置被动监听用于服务器 3.调用accept（）函数接收下一个连接请求创建新套接字用于与该用户建立连接 4.遵循应用层协议反复接受客户请求 构造并发送响应 5.完成服务后关闭与该客户连接 返回操作3
并发无连接：主线程1.创建套接字 绑定熟知端口号 主线程2.反复调用recvfrom（）接收下一个客户请求，并创建新线程处理该客户响应 子线程1.接受特定请求 子线程2.依据应用层协议构造响应报文调用sendto发送  子线程3.退出
并发面向连接：主线程1.创建套接字 绑定熟知端口号 主线程2.设置（主）套接字为被动监听模式 主线程3.反复调用accept（）函数接收下一个连接请求，创建新子线程处理该客户响应 子线程1.接受一个客户服务请求  子线程2.遵循应用层协议与客户交互 子线程3.关闭/释放连接并退出（线程终止）
服务器实现  底层过程隐藏底层代码passivesock（） 
