5.计算机网络之探赜索隐
传输层上
传输层 网络层 链路层
多路复用/分用  可靠数据传输机制  流量控制机制  拥塞控制机制   Internet TCP UDP
传输层服务  为运行在不同Host上的进程提供了一种逻辑通信机制
端系统运行传输层协议 发送方将消息分成一个或多个segment 向下传给网络层  接收方组装成协议交给应用层
网络层：主机之间   传输层：应用进程之间
Internet  可靠按序的交付服务TCP 拥塞 流量 连接建立        不可靠的交付服务 尽力而为           均不保证延迟/带宽

多路复用和多路分用
如果某层一个协议对应直接上层的多个协议/实体，则需要复用/分用     接收端分用，发送端复用
主机收到IP数据报  收到segment后传输层协议将segment导向socket
无连接分用：利用端口号创建socket  UDP的socket用二元组标识（目的ip，目的端口）   主机收到UDP段  来自不同源IP地址/源端口号的Ip数据包被导向同一个socket
面向连接的分用：TCP用四元组标识（源 目的 ip 端口）  接收端利用四个值导向socket  服务器可能同时支持多哦个TCP socket   web服务器为每个客户端开不同的socket
多线程web服务器

UDP user datagram protocol
基于internet ip协议  复用/分用   简单的错误校验（端到端原则）       Best effort 可能丢失 非按序到达     无连接 发送方接收方不需要握手 每个段处理独立于其他段
为什么存在：无需建立连接（减少延迟） 实现简单无需维护连接状态  头部开销少  没有拥塞控制（更好控制发送时间和速率）
UDP 常用于流媒体（容忍丢失，速率敏感）    DNS SNMP    应用层增加可靠机制，错误恢复机制
checksum 目的：检测UDP段传输中是否发生错误（位翻转）  发送方：将段的内容视为16位整数，校验计算，将校验和放入校验和字段    接收方：计算校验和，与校验和字段进行对比（可能相等也有错）

可靠数据传输原理
可靠：不错不丢不乱   可靠数据传输协议：可靠数据传输对应用层、传输层、链路层都很重要  Top-10问题  新到的不可靠特性决定了可靠数据传输协议rdt的复杂性
接口：发送方rdt_send udt_send     接收方rdt_rcv  deliver_data
渐渐设计 发送方 接收方   只考虑单向数据流动（控制信息双向）    利用状态机FSM刻画传输协议
rdt1.0  可靠信道上的可靠数据传输  底层信道完全可靠（无错 无丢弃）   发送方和接收方FSM独立    

rdt2.0  产生位错误的信道
底层信道可能翻转分组中的位  如何从错误中恢复：确认机制ACK接收方显式告知   NAK发送方分组有错误   发送方收到NAK后重传分组          基于这种重传机制的rdt协议称为ARQ协议
新机制：差错检测  控制消息ACK/NAK  重传
停-等协议

rdt2.1 2.2
ACK/NAK消息发生错误/破坏会怎样    为控制信息增加校验和 添加额外的控制消息 重传 产生重复分组            解决重复分组：增加序列号 接收方丢弃重复分组
对比
发送方为每个分组增加了序列号   0，1够用，平等协议  需校验ACK/NAK消息是否发生错误  状态数量翻倍     
接收方需判断分组是否重复  接收方无法知道ACK/NAK是否被发送方正确收到
2.2 无NAK消息协议
只使用ACK，显式加入序列号

rdt3.0
如果信道既可能发生错误也可能丢失分组  方法：发送方等待合理时间      定时器
能正确工作 但性能很差  网络协议限制了物理资源的利用
软硬件协同设计

流水线机制与滑动窗口协议
流水线机制：提高资源利用率
流水线协议，允许发送方在收到ACK前连续发送多个分组，更大的序列号范围，更大的存储空间缓存分组
滑动窗口协议  窗口 允许使用的序列号范围 尺寸n最多n个等待确认消息     序列号空间向前滑动     GBN SR

GBN协议 go back n
发送方 分组头部包含k-bit序列号  窗口尺寸为n 最多n个分组未确认
ACK 确认到序列号n的分组已被正确接收 可能受到重复ACK   为空中分组设置计时器   超时TImeout事件：重传序列号大于等于n，还未收到ACK的所有分组
接收方无缓存  发送拥有最高序列号的，已被正确接收的分组ACK  乱序到达的分组

Selective Repeat协议
接收方对每个分组单独进行确认，设置缓存机制缓存乱序分组，  发送方只重传没收到ACK的分组   发送方窗口 n个连续序列号  限制已发送且未确认的分组
多了一个接收方窗口
SR协议
困境：ack丢失，出现错误       序列号空间大小与窗口尺寸ns+nr<=2^k


6.传输层下
TCP 点对点 可靠按序字节流 流水线机制 发送方/接收方缓存  全双工  面向连接  流量控制机制
TCP段结构 32bits    
序列号 segment第一个字节编号 双方随机选择序列号    ACK 希望接收到的下一个字节的序列号 累计确认机制       如何处理乱序：自己实现

TCP可靠数据传输
在IP基础上实现可靠服务，流水线机制，累计确认，单一重传定时器，触发重传，渐进式
设置超时时间：大于RTT，过短，过长    测量rtt（忽略重传）多次测量求平均（指数加权移动）
安全边界 samplertt与estimatedrtt差值 
TCP发送方，从应用层接收数据，超时，收到ACK 如果确认此前未确认segment则更新sendbase 如果窗口还有未被确认的分组，重新启动定时器
ACK生成
快速重传机制  如果超时计时器超时间隔重新设置将加倍，通过重复ACK检测分组丢失，如果发送方收到同一数据的3个ACK则假定之后的段丢失

流量控制
接收方为TCP分配buffer   上层应用可能处理buffer中数据速度较慢  速度匹配机制       控制发送方不会传输太多，以至于淹没接收方（buffer溢出）
避免发生死锁

TCP连接管理
sender 和 receiver在传输数据前建立连接   初始化TCP变量  Client连接发起者  Server等待客户连接请求
三次握手机制：1客户主机发送SYN报文段 置#   2服务器回复SYNACK 分配缓存告知 置#  3客户机收到后回复ACK
网络攻击，不发第3步
TCP连接关闭  1客户机向服务器发FIN控制segment   2服务器收到后回复ACK关闭连接发送ACK   3客户机收到FIN回复ACK   4服务器收到ACK连接关闭

拥塞控制原理  拥塞：非正式定义：太多发送主机发送了太多数据或发送速度太快以至于网络无法处理
表现：分组丢失（路由器缓存溢出），延迟过大（路由器缓存排队）    
拥塞代价：分组时延太大  网络资源浪费（吞吐率变低）   分组drop时上游传输能力全被浪费

端到端拥塞控制（TCP采用）          网络辅助的拥塞控制（ATM）
ATM ABR弹性服务 如果underloaded使用可用带宽 如果路径拥塞则降低到最低保障速率          RM 发送方发送 设置RM cell位  由接收方返回给发送方

TCP拥塞控制  控制发送速率
sender限制发送速率  congwin动态调整 反应所感知到的网络拥塞     Loss事件3个重复ACK，发送方降低速率   合理调整：加性增-乘性减AIMD  慢启动SS
加性增-乘性减：AIMD  原理：逐渐增加发送速率，谨慎探测可用带宽直到loss       锯齿行为
慢启动  连接开始时指数性增长  快速攀升
切换成线性增长，拥塞避免阶段  Threshold变量  Loss事件发生前CongWin的一半
Loss事件处理  3个重复ACK 减半 线性增长       Timeout事件 conwin直接设为1个mss 指数增长达到threshold再线性增长

throughput吞吐率
高速网络下需要设计新的TCP
TCP的公平性  TCP具有公平性
TCP与UDP共存时 TCP使用带宽较少

传输层 复用/分用  可靠数据传输  流量控制  拥塞控制     Internet传输层UDP TCP
